<?php

namespace DoctrineProxy\__CG__\Eccube\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Category extends \Eccube\Entity\Category implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'id', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'name', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'level', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'rank', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'create_date', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'update_date', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'del_flg', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'CategoryCount', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'CategoryTotalCount', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'ProductCategories', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'Children', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'Parent', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'Creator');
        }

        return array('__isInitialized__', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'id', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'name', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'level', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'rank', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'create_date', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'update_date', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'del_flg', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'CategoryCount', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'CategoryTotalCount', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'ProductCategories', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'Children', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'Parent', '' . "\0" . 'Eccube\\Entity\\Category' . "\0" . 'Creator');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Category $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function countBranches()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'countBranches', array());

        return parent::countBranches();
    }

    /**
     * {@inheritDoc}
     */
    public function calcChildrenRank(\Doctrine\ORM\EntityManager $em, $rank)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'calcChildrenRank', array($em, $rank));

        return parent::calcChildrenRank($em, $rank);
    }

    /**
     * {@inheritDoc}
     */
    public function getParents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParents', array());

        return parent::getParents();
    }

    /**
     * {@inheritDoc}
     */
    public function getPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', array());

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getNameWithLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameWithLevel', array());

        return parent::getNameWithLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescendants()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescendants', array());

        return parent::getDescendants();
    }

    /**
     * {@inheritDoc}
     */
    public function getSelfAndDescendants()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSelfAndDescendants', array());

        return parent::getSelfAndDescendants();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLevel($level)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLevel', array($level));

        return parent::setLevel($level);
    }

    /**
     * {@inheritDoc}
     */
    public function getLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLevel', array());

        return parent::getLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function setRank($rank)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRank', array($rank));

        return parent::setRank($rank);
    }

    /**
     * {@inheritDoc}
     */
    public function getRank()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRank', array());

        return parent::getRank();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreateDate($createDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreateDate', array($createDate));

        return parent::setCreateDate($createDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateDate', array());

        return parent::getCreateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateDate($updateDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateDate', array($updateDate));

        return parent::setUpdateDate($updateDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateDate', array());

        return parent::getUpdateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDelFlg($delFlg)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDelFlg', array($delFlg));

        return parent::setDelFlg($delFlg);
    }

    /**
     * {@inheritDoc}
     */
    public function getDelFlg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDelFlg', array());

        return parent::getDelFlg();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategoryCount(\Eccube\Entity\CategoryCount $categoryCount = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategoryCount', array($categoryCount));

        return parent::setCategoryCount($categoryCount);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryCount', array());

        return parent::getCategoryCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategoryTotalCount(\Eccube\Entity\CategoryTotalCount $categoryTotalCount = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategoryTotalCount', array($categoryTotalCount));

        return parent::setCategoryTotalCount($categoryTotalCount);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryTotalCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryTotalCount', array());

        return parent::getCategoryTotalCount();
    }

    /**
     * {@inheritDoc}
     */
    public function addProductCategory(\Eccube\Entity\ProductCategory $productCategories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProductCategory', array($productCategories));

        return parent::addProductCategory($productCategories);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProductCategory(\Eccube\Entity\ProductCategory $productCategories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProductCategory', array($productCategories));

        return parent::removeProductCategory($productCategories);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductCategories', array());

        return parent::getProductCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function addChild(\Eccube\Entity\Category $children)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChild', array($children));

        return parent::addChild($children);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChild(\Eccube\Entity\Category $children)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChild', array($children));

        return parent::removeChild($children);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', array());

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Eccube\Entity\Category $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', array($parent));

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', array());

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreator(\Eccube\Entity\Member $creator = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreator', array($creator));

        return parent::setCreator($creator);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreator', array());

        return parent::getCreator();
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', array($offset));

        return parent::offsetExists($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($offset, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', array($offset, $value));

        return parent::offsetSet($offset, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', array($offset));

        return parent::offsetGet($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', array($offset));

        return parent::offsetUnset($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function setPropertiesFromArray(array $arrProps, array $excludeAttribute = array (
), \ReflectionClass $parentClass = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPropertiesFromArray', array($arrProps, $excludeAttribute, $parentClass));

        return parent::setPropertiesFromArray($arrProps, $excludeAttribute, $parentClass);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(array $excludeAttribute = array (
), \ReflectionClass $parentClass = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array($excludeAttribute, $parentClass));

        return parent::toArray($excludeAttribute, $parentClass);
    }

    /**
     * {@inheritDoc}
     */
    public function copyProperties($srcObject, array $excludeAttribute = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'copyProperties', array($srcObject, $excludeAttribute));

        return parent::copyProperties($srcObject, $excludeAttribute);
    }

}
